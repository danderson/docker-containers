# Netfilter configuration, in Ferm format.  This gets compiled to an
# iptables-restore script when the container is built, and is
# installed by the container's entrypoint.
#
# The general strategy we have is that the main system routing table
# has been purged of all routes except those installed by OpenVPN. So,
# until the VPN is up, most of the container has no route to anything
# at all.
#
# But, OpenVPN itself needs to connect out, and likely also needs to
# resolve DNS names to bring up the VPN. For that, there's a separate
# routing table, which packets access by setting fwmark=1.

domain ip {
  table filter {
    chain INPUT {
      # Many things break if you break connectivity to localhost.
      interface lo ACCEPT;
      # ICMP is also fairly necessary.
      proto icmp @subchain "ICMP" {
        # Echo request/reply, destination unreachable and TTL exceeded,
        # everything else is dropped.
        icmp-type (
          destination-unreachable
          time-exceeded
          echo-request
          echo-reply
        ) ACCEPT;
        DROP;
      }
      # The VPN can return traffic for connections that we establish. No
      # inbound initiation allowed.
      interface vpn mod state state (ESTABLISHED RELATED) ACCEPT;
      # Non-VPN traffic is restricted to the bare minimum required to
      # make OpenVPN work.
      interface eth0 proto udp mod state state (ESTABLISHED RELATED) {
        dport 1194 ACCEPT;
        saddr (8.8.8.8 8.8.4.4) sport 53 ACCEPT;
      }
      # Drop everything else. For debuggability, we try to be nice with
      # ICMP, but not *too* nice.
      mod limit limit 1/second REJECT;
      policy DROP;
    }

    chain OUTPUT {
      # Again, borking loopback breaks many things.
      outerface lo ACCEPT;
      # ICMP is also fairly necessary.
      proto icmp jump ICMP;
      # Egress on the VPN interface is fine.
      outerface vpn ACCEPT;
      # Non-VPN traffic is restricted to the bare minimum, again.
      outerface eth0 proto udp mod owner uid-owner 1194 {
        sport 1194 ACCEPT;
        daddr (8.8.8.8 8.8.4.4) dport 53 ACCEPT;
      }
      # Reject everything else with an eager ICMP error. This makes
      # things inside the container fail-fast, and makes debugging
      # easier.
      REJECT reject-with icmp-net-prohibited;
      policy DROP;
    }

    chain FORWARD policy DROP;
  }
}

# No ipv6 support yet, because I'm a bad, bad person.
domain ip6 {
  chain INPUT {
    interface lo ACCEPT;
    mod limit limit 1/second REJECT;
    policy DROP;    
  }
  chain OUTPUT {
    outerface lo ACCEPT;
    REJECT reject-with icmp-net-prohibited;
    policy DROP;
  }
  chain FORWARD policy DROP;
}
