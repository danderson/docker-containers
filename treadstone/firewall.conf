# Netfilter configuration, in Ferm format.  This gets compiled to an
# iptables-restore script when the container is built, and is
# installed by run.sh.
#
# The requirements we're trying to fulfill are:
#  - By default, traffic is only allowed to egress through the VPN.
#  - The OpenVPN process itself needs some surgical bypasses, because
#    it has to actually connect and maintain the VPN session.
#  - Response traffic for connections to EXPOSEd ports should bypass
#    the VPN.
#
# This means that services outside the container can still talk to
# EXPOSEd ports normally, and processes in the container can respond
# to those connections normally. However, any traffic initiated from
# within the container will egress through the VPN.
#
# These requirements are implemented by a combination of netfilter and
# policy routing.
#
#  - OpenVPN configures a default route pointing to the 'vpn'
#    interface, and netfilter allows unrestricted egress on that
#    interface.
#  - While the VPN is down, the default route points to 'eth0', but
#    netfilter rejects all egress traffic.
#  - The user OpenVPN runs as has a set of pinhole exceptions that
#    allow it to egress on 'eth0', just enough to bring the VPN up.
#  - Ingress traffic to EXPOSEd ports on 'eth0' is tagged with a
#    conntrack mark. When the container responds, the connmark results
#    in a special routing table lookup that steers the traffic to
#    'eth0' instead of 'vpn'. Netfilter further matches on the
#    connmark to authorize the VPN bypass.

domain ip {
  table filter {
    chain INPUT {
      # Many things break if you break connectivity to localhost.
      interface lo ACCEPT;
      # ICMP is also fairly necessary.
      proto icmp @subchain "ICMP" {
        # Echo request/reply, destination unreachable and TTL exceeded,
        # everything else is dropped.
        icmp-type (
          destination-unreachable
          time-exceeded
          echo-request
          echo-reply
        ) ACCEPT;
        DROP;
      }
      # The VPN can return traffic for connections that we establish. No
      # inbound initiation allowed.
      interface vpn mod state state (ESTABLISHED RELATED) ACCEPT;
      # Non-VPN traffic is restricted to authorized exposed ports,
      # plus the bare minimum required to make OpenVPN connect.
      interface eth0 {
        proto udp mod state state (ESTABLISHED RELATED) {
          dport 1194 ACCEPT;
          saddr (8.8.8.8 8.8.4.4) sport 53 ACCEPT;
        }
        # The startup code will add rules to this subchain to
        # appropriately tag this traffic as authorized.
        @subchain "EXPOSED_PORTS" {
          # Example rule that run.sh adds:
          ## proto tcp dport 80 CONNMARK set-mark 100;
        }
        mod connmark mark 100 ACCEPT;
      }
      
      # Non-VPN traffic is restricted to the bare minimum required to
      # make OpenVPN work.
      interface eth0 proto udp mod state state (ESTABLISHED RELATED) {
        dport 1194 ACCEPT;
        saddr (8.8.8.8 8.8.4.4) sport 53 ACCEPT;
      }
      # Drop everything else. For debuggability, we try to be nice with
      # ICMP, but not *too* nice.
      mod limit limit 1/second REJECT;
      policy DROP;
    }

    chain OUTPUT {
      # Again, borking loopback breaks many things.
      outerface lo ACCEPT;
      # ICMP is also fairly necessary.
      proto icmp jump ICMP;
      # Egress on the VPN interface is fine.
      outerface vpn ACCEPT;
      # Non-VPN traffic is restricted to the bare minimum, again.
      outerface eth0 {
        proto udp mod owner uid-owner 1194 {
          sport 1194 ACCEPT;
          daddr (8.8.8.8 8.8.4.4) dport 53 ACCEPT;
        }
        mod mark mark 100 ACCEPT;
      }
      # Reject everything else with an eager ICMP error. This makes
      # things inside the container fail-fast, and makes debugging
      # easier.
      REJECT reject-with icmp-net-prohibited;
      policy DROP;
    }

    chain FORWARD policy DROP;
  }

  table mangle chain OUTPUT mod connmark mark 100 CONNMARK restore-mark;
}

# No ipv6 support yet, because I'm a bad, bad person.
domain ip6 {
  chain INPUT {
    interface lo ACCEPT;
    mod limit limit 1/second REJECT;
    policy DROP;    
  }
  chain OUTPUT {
    outerface lo ACCEPT;
    REJECT reject-with icmp-net-prohibited;
    policy DROP;
  }
  chain FORWARD policy DROP;
}
